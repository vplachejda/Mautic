<?php
/**
 * @package     Mautic
 * @copyright   2014 Mautic, NP. All rights reserved.
 * @author      Mautic
 * @link        http://mautic.com
 * @license     GNU/GPLv3 http://www.gnu.org/licenses/gpl-3.0.html
 */

namespace Mautic\UserBundle\Entity;

use Doctrine\ORM\QueryBuilder;
use Doctrine\ORM\Tools\Pagination\Paginator;
use Mautic\CoreBundle\Entity\CommonRepository;
use Symfony\Component\HttpKernel\Exception\NotFoundHttpException;

/**
 * RoleRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class RoleRepository extends CommonRepository
{

    /**
     * Get a list of roles
     *
     * @param array      $args
     * @param Translator $translator
     * @return Paginator
     */
    public function getEntities($args = array())
    {
        $q = $this
            ->createQueryBuilder('r');

        if (!$this->buildClauses($q, $args)) {
            return array();
        }

        $query = $q->getQuery();
        $result = new Paginator($query);
        return $result;
    }

    protected function addCatchAllWhereClause(QueryBuilder &$q, $filter)
    {
        $unique  = $this->generateRandomParameterName(); //ensure that the string has a unique parameter identifier
        $string  = ($filter->strict) ? $filter->string : "%{$filter->string}%";
        $func    = ($filter->not) ? "notLike" : "like";
        $xFunc   = ($func == "notLike") ? "andX" : "orX";

        $expr = $q->expr()->$xFunc(
            $q->expr()->$func('r.name',  ':'.$unique),
            $q->expr()->$func('r.description', ':'.$unique)
        );
        return array(
            $expr,
            array("$unique" => $string)
        );
    }

    protected function addSearchCommandWhereClause(QueryBuilder &$q, $filter)
    {
        $command         = $field = $filter->command;
        $string          = $filter->string;
        $unique          = $this->generateRandomParameterName();
        $returnParameter = true; //returning a parameter that is not used will lead to a Doctrine error
        $func            = ($filter->not) ? "notLike" : "like";
        $expr            = false;
        switch ($command) {
            case $this->translator->trans('mautic.core.searchcommand.is'):
                $isFunc = ($filter->not) ? "neq" : "eq";
                switch($string) {
                    case $this->translator->trans('mautic.user.user.searchcommand.isadmin');
                        $expr = $q->expr()->$isFunc("r.isAdmin", 1);
                        break;
                }
                $returnParameter = false;
                break;
            case $this->translator->trans('mautic.core.searchcommand.name'):
                $expr = $q->expr()->$func("r.name", ':'.$unique);
                break;
        }

        $string  = ($filter->strict) ? $filter->string : "%{$filter->string}%";
        return array(
            $expr,
            ($returnParameter) ? array("$unique" => $string) : array()
        );

    }

    protected function isSupportedSearchCommand($command)
    {
        $commands = array(
            $this->translator->trans('mautic.core.searchcommand.is'),
            $this->translator->trans('mautic.core.searchcommand.name'),
        );
        return in_array($command, $commands);
    }

    protected function getDefaultOrderBy()
    {
        return 'r.name';
    }
}
