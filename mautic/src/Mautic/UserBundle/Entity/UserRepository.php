<?php

namespace Mautic\UserBundle\Entity;

use Doctrine\ORM\Tools\Pagination\Paginator;
use Doctrine\ORM\NoResultException;
use Symfony\Component\Security\Core\Exception\UsernameNotFoundException;
use Symfony\Component\Security\Core\Exception\UnsupportedUserException;
use Symfony\Component\Security\Core\User\UserInterface;
use Symfony\Component\Security\Core\User\UserProviderInterface;
use Mautic\CoreBundle\Entity\CommonRepository;

/**
 * UserRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserRepository extends CommonRepository implements UserProviderInterface
{

    /**
     * Loads the user by username
     *
     * @param $username
     * @return bool|mixed
     */
    public function loadUserByUsername($username)
    {
        $q = $this
            ->createQueryBuilder('u')
            ->select('u, r')
            ->leftJoin('u.role', 'r')
            ->where('u.username = :username OR u.email = :email')
            ->setParameter('username', $username)
            ->setParameter('email', $username)
            ->getQuery();

        try {
            $user = $q->getSingleResult();
        } catch (NoResultException $e) {
            $message = sprintf(
                'Unable to find an active MauticUserBundle:User object identified by "%s".',
                $username
            );
            throw new UsernameNotFoundException($message, 0, $e);
        }

        //load permissions
        $user->permissions = $this->_em->getRepository('MauticUserBundle:Permission')->getPermissionsByRole($user->getRole());

        return $user;
    }


    public function findUserById($id)
    {
        $q = $this
            ->createQueryBuilder('u')
            ->select('u, r')
            ->leftJoin('u.role', 'r')
            ->where('u.id = :id')
            ->setParameter('id', $id)
            ->getQuery();

        try {
            $user = $q->getSingleResult();
        } catch (NoResultException $e) {
            $message = sprintf(
                'Unable to find an active MauticUserBundle:User object identified by "%s".',
                $id
            );
            throw new UsernameNotFoundException($message, 0, $e);
        }

        //load permissions
        $user->setActivePermissions(
            $this->_em->getRepository('MauticUserBundle:Permission')->getPermissionsByRole($user->getRole())
        );

        return $user;
    }


    /**
     * Refresh user; Symfony requires for authentication
     *
     * @param UserInterface $user
     * @return null|object
     * @throws \Symfony\Component\Security\Core\Exception\UnsupportedUserException
     */
    public function refreshUser(UserInterface $user)
    {
        $class = get_class($user);
        if (!$this->supportsClass($class)) {
            throw new UnsupportedUserException(
                sprintf(
                    'Instances of "%s" are not supported.',
                    $class
                )
            );
        }

        return $this->findUserbyId($user->getId());
    }

    /**
     * Check to see if this repository supports a class
     *
     * @param $class
     * @return bool
     */
    public function supportsClass($class)
    {
        return $this->getEntityName() === $class
        || is_subclass_of($class, $this->getEntityName());
    }

    /**
     * Find user by username or if email matches the username
     *
     * @param $params
     * @return array
     */
    public function findByUsernameOrMatchEmail($params) {
        $q = $this
            ->createQueryBuilder('u')
            ->where('u.username = :username OR u.email = :email')
            ->setParameter('username', $params['username'])
            ->setParameter('email', $params['username'])
            ->getQuery();
        return $q->getResult();
    }

    /**
     * Retrieve a list of users
     *
     * @param int    $start
     * @param int    $limit
     * @param string $filter
     * @param string $orderBy
     * @param string $orderByDir
     * @return Paginator
     */
    public function getUsers($start = 0, $limit = 30, $filter = '', $orderBy = 'u.lastName, u.firstName, u.username', $orderByDir = "ASC") {
        $q = $this
            ->createQueryBuilder('u')
            ->select('u, r')
            ->leftJoin('u.role', 'r')
            ->orderBy($orderBy, $orderByDir)
            ->setFirstResult($start)
            ->setMaxResults($limit);

        if (!empty($filter)) {
            $q->where('u.username LIKE :filter')
                ->orWhere('u.email LIKE :filter')
                ->orWhere('u.firstName LIKE :filter')
                ->orWhere('u.lastName LIKE :filter')
                ->setParameter(':filter', '%'.$filter.'%');
        }
        $query = $q->getQuery();
        $result = new Paginator($query);
        return $result;
    }
}