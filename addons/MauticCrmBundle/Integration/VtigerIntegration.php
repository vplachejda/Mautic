<?php
/**
 * @package     Mautic
 * @copyright   2014 Mautic Contributors. All rights reserved.
 * @author      Mautic
 * @link        http://mautic.org
 * @license     GNU/GPLv3 http://www.gnu.org/licenses/gpl-3.0.html
 */

namespace MauticAddon\MauticCrmBundle\Integration;
use MauticAddon\MauticCrmBundle\Api\CrmApi;
use Symfony\Component\Form\FormBuilder;

/**
 * Class VtigerIntegration
 */
class VtigerIntegration extends CrmAbstractIntegration
{
    /**
     * Returns the name of the social integration that must match the name of the file
     *
     * @return string
     */
    public function getName()
    {
        return 'Vtiger';
    }

    /**
     * {@inheritdoc}
     *
     * @return array
     */
    public function getRequiredKeyFields()
    {
        return array(
            'url'       => 'mautic.vtiger.form.url',
            'username'  => 'mautic.vtiger.form.username',
            'accessKey' => 'mautic.vtiger.form.password'
        );
    }

    /**
     * @return string
     */
    public function getClientIdKey ()
    {
        return 'username';
    }

    /**
     * @return string
     */
    public function getClientSecretKey ()
    {
        return 'accessKey';
    }

    /**
     * @return string
     */
    public function getAuthTokenKey ()
    {
        return 'sessionName';
    }

    /**
     * @param array  $parameters
     * @param string $authMethod
     *
     * @return \MauticAddon\MauticCrmBundle\Api\Auth\AbstractAuth|void
     */
    public function createApiAuth($parameters = array(), $authMethod = 'Auth')
    {
        $vtigerSettings = $this->getDecryptedApiKeys();

        parent::createApiAuth($vtigerSettings);
    }

    /**
     * @return mixed|void
     */
    public function getAvailableFields($silenceExceptions = true)
    {
        $vtigerFields = array();

        try {
            if ($this->checkApiAuth($silenceExceptions)) {
                $leadObject = CrmApi::getContext($this->getName(), "lead", $this->auth)->describe();

                if ($leadObject == null || !isset($leadObject['fields'])) {
                    return array();
                }

                foreach ($leadObject['fields'] as $fieldInfo) {
                    if (!isset($fieldInfo['name']) || !$fieldInfo['editable'] || in_array($fieldInfo['type']['name'], array('owner', 'reference', 'boolean', 'autogenerated'))) {
                        continue;
                    }

                    $vtigerFields[$fieldInfo['name']] = array(
                        'type'  => 'string',
                        'label' => $fieldInfo['label'],
                        'required' => $fieldInfo['mandatory']
                    );
                }
            }
        } catch (ErrorException $exception) {
            $this->logIntegrationError($exception);

            if (!$silenceExceptions) {
                throw $exception;
            }
            return false;
        }

        return $vtigerFields;
    }

    /**
     * {@inheritdoc}
     *
     * @param $section
     *
     * @return string
     */
    public function getFormNotes ($section)
    {
        if ($section == 'field_match') {
            return array('mautic.vtiger.form.field_match_notes', 'info');
        }

        return parent::getFormNotes($section);
    }


    /**
     * {@inheritdoc}
     *
     * @param $mappedData
     */
    public function amendLeadDataBeforePush(&$mappedData)
    {
        if (!empty($mappedData)) {
            //vtiger requires assigned_user_id so default to authenticated user
            $data = $this->getDecryptedApiKeys();

            $mappedData['assigned_user_id'] = $data['userId'];
        }
    }
}
